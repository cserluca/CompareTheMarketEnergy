// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CompareTheMarketEnergy.SpecflowFeatures
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Quote For Electricity Only")]
    public partial class QuoteForElectricityOnlyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ElectricityOnlyQuote.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Quote For Electricity Only", "As a user of the Compare The Market Energy site\r\nI want to enter supplier, energy" +
                    " and personal details\r\nSo that I can get the cheapest price for electricity in m" +
                    "y postcode area", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Electricity Only Quote")]
        public virtual void ElectricityOnlyQuote()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Electricity Only Quote", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
    testRunner.Given("I am on the your supplier page for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
   testRunner.And("I enter a postcode for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
      testRunner.And("I do not have my bill handy for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
      testRunner.And("I want to compare price quotes for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
      testRunner.And("I do not know who supplies my electricity for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
   testRunner.And("I click next on the your supplier page for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
   testRunner.And("I do not use a prepayment meter for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
   testRunner.And("I do not have an EconomySeven meter for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
      testRunner.And("I enter how much I currently spend on electricity each month for an electricity o" +
                    "nly quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
   testRunner.And("I click Next on the your energy page for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
   testRunner.And("I am interested in all tariffs for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
      testRunner.And("I am interested in all payment types for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
      testRunner.And("I enter my email address for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
      testRunner.And("I agree to product and marketing information via email for an electricity only qu" +
                    "ote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
      testRunner.And("I have read and understood the website terms and conditions for an electricity on" +
                    "ly quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
     testRunner.When("I click Go to prices for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
  testRunner.Then("I will see the your results page for an electricity only quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
